{"version":3,"sources":["serviceWorker.js","pages/App/App.style.js","styles/colors.js","styles/globalStyle.js","pages/App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Container","styled","div","_templateObject","Header","header","_templateObject2","Section","section","_templateObject3","colors","red","pink","purple","deepPurple","indigo","blue","lightBlue","cyan","teal","green","deepOrange","keys","Object","Math","floor","random","length","createGlobalStyle","globalStyle_templateObject","App","react_default","a","createElement","globalStyle","Component","ReactDOM","render","pages_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wKAYoBA,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2oBChBH,IAAMC,EAAYC,IAAOC,IAAVC,KASTC,EAASH,IAAOI,OAAVC,KAYNC,EAAUN,IAAOO,QAAVC,KCvBPC,EAAS,CACdC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,WAAY,UACZC,OAAQ,UACRC,KAAM,UACNC,UAAW,UACXC,KAAM,UACNC,KAAM,UACNC,MAAO,UACPC,WAAY,WAGPC,EAAOC,OAAOD,KAAKZ,GACNY,EAAKE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKK,oRCZzCC,kBAAfC,IDiBmB,QEqBJC,mLAlCb,OACCC,EAAAC,EAAAC,cAACjC,EAAD,KACC+B,EAAAC,EAAAC,cAACC,EAAD,MACAH,EAAAC,EAAAC,cAAC7B,EAAD,KACC2B,EAAAC,EAAAC,cAAA,oBAEDF,EAAAC,EAAAC,cAAC1B,EAAD,KACCwB,EAAAC,EAAAC,cAAA,SACE,IADF,kMAK+B,KAE/BF,EAAAC,EAAAC,cAAA,SACE,IADF,kMAK+B,KAE/BF,EAAAC,EAAAC,cAAA,SACE,IADF,kMAK+B,cA5BlBE,aCClBC,IAASC,OAAON,EAAAC,EAAAC,cAACK,EAAD,MAASC,SAASC,eAAe,SL4H5C,kBAAmBC,WACtBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAClCA,EAAaC","file":"static/js/main.9cee566a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n\twindow.location.hostname === 'localhost' ||\r\n\t\t// [::1] is the IPv6 localhost address.\r\n\t\twindow.location.hostname === '[::1]' ||\r\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\r\n\t\twindow.location.hostname.match(\r\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n\t\t)\r\n);\r\n\r\nexport function register(config) {\r\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n\t\tif (publicUrl.origin !== window.location.origin) {\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\twindow.addEventListener('load', () => {\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n\t\t\tif (isLocalhost) {\r\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\r\n\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\r\n\t\t\t\t\t\t\t'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Is not localhost. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n\tnavigator.serviceWorker\r\n\t\t.register(swUrl)\r\n\t\t.then(registration => {\r\n\t\t\tregistration.onupdatefound = () => {\r\n\t\t\t\tconst installingWorker = registration.installing;\r\n\t\t\t\tif (installingWorker == null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\t\tif (installingWorker.state === 'installed') {\r\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\r\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\r\n\t\t\t\t\t\t\t// content until all client tabs are closed.\r\n\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\r\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\r\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\r\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tconsole.error('Error during service worker registration:', error);\r\n\t\t});\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl)\r\n\t\t.then(response => {\r\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\t\tconst contentType = response.headers.get('content-type');\r\n\t\t\tif (\r\n\t\t\t\tresponse.status === 404 ||\r\n\t\t\t\t(contentType != null &&\r\n\t\t\t\t\tcontentType.indexOf('javascript') === -1)\r\n\t\t\t) {\r\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\tconsole.log(\r\n\t\t\t\t'No internet connection found. App is running in offline mode.'\r\n\t\t\t);\r\n\t\t});\r\n}\r\n\r\nexport function unregister() {\r\n\tif ('serviceWorker' in navigator) {\r\n\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\tregistration.unregister();\r\n\t\t});\r\n\t}\r\n}\r\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n\tbackground-color: #282c34;\n\tmin-height: 100vh;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tcolor: white;\n`;\n\nconst Header = styled.header`\n\twidth: 100vw;\n\theight: 100px;\n\ttext-align: center;\n\tborder-bottom: 2px solid #fff;\n\n\th1 {\n\t\tmargin: 2rem;\n\t\tfont-size: 2rem;\n\t}\n`;\n\nconst Section = styled.section`\n\tmargin: 10%;\n\tmargin-top: 25px;\n`;\n\nexport { Container, Header, Section };\n","const colors = {\n\tred: '#af4448',\n\tpink: '#ba2d65',\n\tpurple: '#883997',\n\tdeepPurple: '#65499c',\n\tindigo: '#49599a',\n\tblue: '#2286c3',\n\tlightBlue: '#0093c4',\n\tcyan: '#009faf',\n\tteal: '#00867d',\n\tgreen: '#519657',\n\tdeepOrange: '#c75b39'\n};\n\nconst keys = Object.keys(colors);\nconst primarykey = keys[Math.floor(Math.random() * keys.length)];\n\nconst primaryColor = colors[primarykey];\nconst primaryTextColor = '#3d3d3d';\nconst secondaryTextColor = 'rgba(255, 255, 255, 0.4)';\nconst background = '#fff';\nconst cardview = '#f5f5f5';\nconst backgroundDark = '#cdcccc';\n\nexport {\n\tprimaryColor,\n\tprimaryTextColor,\n\tsecondaryTextColor,\n\tbackground,\n\tcardview,\n\tbackgroundDark\n};\n","import { createGlobalStyle } from 'styled-components';\nimport { background } from './colors';\n\nexport default createGlobalStyle`\n    @import url('https://fonts.googleapis.com/css?family=Press+Start+2P');\n\n    body {\n        font-family: 'Press Start 2P', cursive;\n\t\tbackground-color: ${background};\n        margin: 0px;\n    }\n`;\n","import React, { Component } from 'react';\n\nimport { Container, Header, Section } from './App.style';\nimport GlobalStyle from '../../styles/globalStyle';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<GlobalStyle />\n\t\t\t\t<Header>\n\t\t\t\t\t<h1>Regas</h1>\n\t\t\t\t</Header>\n\t\t\t\t<Section>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\tTexto Texto Texto Texto Texto Texto Texto Texto Texto\n\t\t\t\t\t\tTexto Texto Texto Texto Texto Texto Texto Texto Texto\n\t\t\t\t\t\tTexto Texto Texto Texto Texto Texto Texto Texto Texto\n\t\t\t\t\t\tTexto Texto Texto Texto Texto{' '}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\tTexto Texto Texto Texto Texto Texto Texto Texto Texto\n\t\t\t\t\t\tTexto Texto Texto Texto Texto Texto Texto Texto Texto\n\t\t\t\t\t\tTexto Texto Texto Texto Texto Texto Texto Texto Texto\n\t\t\t\t\t\tTexto Texto Texto Texto Texto{' '}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\tTexto Texto Texto Texto Texto Texto Texto Texto Texto\n\t\t\t\t\t\tTexto Texto Texto Texto Texto Texto Texto Texto Texto\n\t\t\t\t\t\tTexto Texto Texto Texto Texto Texto Texto Texto Texto\n\t\t\t\t\t\tTexto Texto Texto Texto Texto{' '}\n\t\t\t\t\t</p>\n\t\t\t\t</Section>\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './pages/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}